[2024-06-07 19:54:47.479305] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:54:48.246592] Running Slither on dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:54:49.986662] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:54:50.822353] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/AdditionalZkSync.sol
Error: "solc" is not found.
[2024-06-07 19:54:51.601924] Integrating Giza AI
[2024-06-07 19:54:51.602443] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/Governance.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:54:52.359219] Running Slither on dist/backend/scripts/smart_contracts/zkSync/Governance.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/Governance.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/Governance.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/Governance.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/Governance.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:54:54.082090] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/Governance.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:54:54.898300] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/Governance.sol
Error: "solc" is not found.
[2024-06-07 19:54:55.668475] Integrating Giza AI
[2024-06-07 19:54:55.668475] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/Proxy.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:54:56.419175] Running Slither on dist/backend/scripts/smart_contracts/zkSync/Proxy.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/Proxy.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/Proxy.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/Proxy.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/Proxy.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:54:58.173519] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/Proxy.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:54:58.958534] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/Proxy.sol
Error: "solc" is not found.
[2024-06-07 19:54:59.784738] Integrating Giza AI
[2024-06-07 19:54:59.785268] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:55:00.576620] Running Slither on dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:55:02.403673] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:55:03.250130] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/TokenGovernance.sol
Error: "solc" is not found.
[2024-06-07 19:55:03.989850] Integrating Giza AI
[2024-06-07 19:55:03.990396] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:55:04.763932] Running Slither on dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:55:06.423148] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:55:07.296769] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/UpgradeGatekeeper.sol
Error: "solc" is not found.
[2024-06-07 19:55:08.097609] Integrating Giza AI
[2024-06-07 19:55:08.098505] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/Verifier.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:55:08.828468] Running Slither on dist/backend/scripts/smart_contracts/zkSync/Verifier.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/Verifier.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/Verifier.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/Verifier.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/Verifier.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:55:10.570647] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/Verifier.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:55:11.328897] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/Verifier.sol
Error: "solc" is not found.
[2024-06-07 19:55:12.089566] Integrating Giza AI
[2024-06-07 19:55:12.090117] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:55:12.892005] Running Slither on dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:55:14.507898] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:55:15.338323] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/ZkSync.sol
Error: "solc" is not found.
[2024-06-07 19:55:16.146152] Integrating Giza AI
[2024-06-07 19:55:16.146152] Running Echidna on dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "echidna-test": executable file not found in $PATH: unknown.
[2024-06-07 19:55:16.876099] Running Slither on dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol
'solc --version' running
'solc /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/contracts/dist/backend/scripts/smart_contracts/zkSync' running
Compilation warnings/errors on /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol:
Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


Traceback (most recent call last):
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 582, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ethsec/.local/bin/slither", line 8, in <module>
    sys.exit(main())
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 727, in main
    main_impl(all_detector_classes=detectors, all_printer_classes=printers)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 833, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/ethsec/.local/lib/python3.10/site-packages/slither/__main__.py", line 96, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 718, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 207, in __init__
    self._compile(**kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/crytic_compile.py", line 629, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 151, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 280, in _get_targets_json
    return _run_solc(
  File "/home/ethsec/.local/lib/python3.10/site-packages/crytic_compile/platform/solc.py", line 586, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.24+commit.e11b9ed9.Linux.g++) - note that nightly builds are considered to be strictly less than the released version
 --> /contracts/dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol:3:1:
  |
3 | pragma solidity ^0.7.0;
  | ^^^^^^^^^^^^^^^^^^^^^^^


[2024-06-07 19:55:18.565177] Running Foundry on dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol
Build, test, fuzz, debug and deploy Solidity contracts

Usage: forge <COMMAND>

Commands:
  bind               Generate Rust bindings for smart contracts
  build              Build the project's smart contracts [aliases: b, compile]
  cache              Manage the Foundry cache
  clean              Remove the build artifacts and cache directories [aliases: cl]
  clone              Clone a contract from Etherscan
  completions        Generate shell completions script [aliases: com]
  config             Display the current config [aliases: co]
  coverage           Generate coverage reports
  create             Deploy a smart contract [aliases: c]
  debug              Debugs a single smart contract as a script [aliases: d]
  doc                Generate documentation for the project
  flatten            Flatten a source file and all of its imports into one file [aliases: f]
  fmt                Format Solidity source files
  geiger             Detects usage of unsafe cheat codes in a project and its dependencies
  generate           Generate scaffold files
  generate-fig-spec  Generate Fig autocompletion spec [aliases: fig]
  help               Print this message or the help of the given subcommand(s)
  init               Create a new Forge project
  inspect            Get specialized information about a smart contract [aliases: in]
  install            Install one or multiple dependencies [aliases: i]
  remappings         Get the automatically inferred remappings for the project [aliases: re]
  remove             Remove one or multiple dependencies [aliases: rm]
  script             Run a smart contract as a script, building transactions that can be sent
                         onchain
  selectors          Function selector utilities [aliases: se]
  snapshot           Create a snapshot of each test's gas usage [aliases: s]
  test               Run the project's tests [aliases: t]
  tree               Display a tree visualization of the project's dependency graph [aliases:
                         tr]
  update             Update one or multiple dependencies [aliases: u]
  verify-bytecode    Verify the deployed bytecode against its source [aliases: vb]
  verify-check       Check verification status on Etherscan [aliases: vc]
  verify-contract    Verify smart contracts on Etherscan [aliases: v]

Options:
  -h, --help     Print help
  -V, --version  Print version

Find more information in the book: http://book.getfoundry.sh/reference/forge/forge.html
[2024-06-07 19:55:19.384568] Running Hardhat on dist/backend/scripts/smart_contracts/zkSync/ZkSyncNFTFactory.sol
Error: "solc" is not found.
[2024-06-07 19:55:20.207824] Integrating Giza AI
[2024-06-07 19:55:20.208364] Smart contract analysis completed. Results saved to smart_contract_analysis_20240607_195447.txt
